directive @filter(op: String!, value: [String!]) on FIELD | INLINE_FRAGMENT
directive @tag(name: String) on FIELD
directive @output(name: String) on FIELD
directive @optional on FIELD
directive @recurse(depth: Int!) on FIELD
directive @fold on FIELD

schema {
  query: Query
}

type Query {
    Crate: Crate!
}


type Crate {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.items
    """
    item: [Item!]!
    """
    A walk of all Expr nodes in this crate.
    """
    expr: [Expr!]!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.Node.html
"""
interface Node {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.find_parent
    """
    parent: Node

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.is_inside_const_context
    """
    inside_const_context: Boolean!
}


"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.Node.html#variant.Item
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Item.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ItemKind.html
"""
interface Item implements Node {
    parent: Node
    ident: String!
    inside_const_context: Boolean!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ItemKind.html#variant.Fn
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.FnSig.html
"""
type Fn implements Item & Node {
    parent: Node
    ident: String!
    inside_const_context: Boolean!

    body: FnBody!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.BodyId.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Body.html
"""
interface Body implements Node {
    parent: Node
    inside_const_context: Boolean!

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Body.html#structfield.value
    """
    value: Expr!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Expr.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html
"""
interface Expr implements Node {
    parent: Node
    inside_const_context: Boolean!

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/typeck_results/struct.TypeckResults.html#method.node_type
    """
    type: Ty
}

"""
We have no reason to believe that a Fn's body will ever not be a block. 
"""
interface FnBody implements Body & Node {
    parent: Node
    inside_const_context: Boolean!
    
    value: Block!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html#variant.Block
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Block.html
"""
type Block implements Expr & Node {
    parent: Node
    inside_const_context: Boolean!

    type: Ty
    
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Block.html#structfield.stmts
    """
    statements: [Statement!]!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.Node.html#variant.Stmt
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Stmt.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.StmtKind.html
"""
interface Statement implements Node {
    parent: Node
    inside_const_context: Boolean!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.StmtKind.html#variant.Local
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Local.html
"""
type LocalStatement implements Statement & Node {
    parent: Node
    inside_const_context: Boolean!
    
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Local.html#structfield.init
    """
    init: Expr
}

interface Ty {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/type.TyKind.html
    """
    as_string: String!
    
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.type_dependent_def_id
    """
    def: Def
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html#variant.MethodCall
"""
type MethodCall implements Expr & Node {
    parent: Node
    inside_const_context: Boolean!

    receiver: Expr!

    type: Ty
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def_id/struct.DefId.html
"""
type Def {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.lookup_stability
    """
    stability: Stability

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.lookup_const_stability
    """
    const_stability: ConstStability

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.opt_item_ident
    """
    ident: String

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.def_path_str
    """
    path: String!
}

"""
TODO: Unflatten StabilityLevel props

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/struct.Stability.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html
"""
type Stability {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/struct.Stability.html#structfield.feature
    """
    feature: String!

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#method.is_stable
    """
    stable: Boolean!

    """
    Reason for the current stability level.

    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.reason
    """
    reason: String

    """
    Relevant rust-lang/rust issue.

    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.issue
    """
    issue: Int

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.is_soft
    """
    soft: Boolean

    """
    If part of a feature is stabilized and a new feature is added for the remaining parts, then the `implied_by` attribute is used to indicate which now-stable feature previously contained an item.
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.implied_by
    """
    implied_by: String

    """
    Rust release which stabilized this feature.
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Stable.field.since
    """
    since: String

    """
    Is this item allowed to be referred to on stable, despite being contained in unstable modules?
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Stable.field.allowed_through_unstable_modules
    """
    allowed_through_unstable_modules: Boolean
}

"""
TODO: Unflatten StabilityLevel props

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/struct.ConstStability.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html
"""
type ConstStability {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/struct.ConstStability.html#structfield.feature
    """
    feature: String!

    """
    Whether the function has a #[rustc_promotable] attribute.
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/struct.ConstStability.html#structfield.promotable
    """
    promotable: Boolean!

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#method.is_stable
    """
    stable: Boolean!

    """
    Reason for the current stability level.

    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.reason
    """
    reason: String

    """
    Relevant rust-lang/rust issue.

    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.issue
    """
    issue: Int

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.is_soft
    """
    soft: Boolean

    """
    If part of a feature is stabilized and a new feature is added for the remaining parts, then the `implied_by` attribute is used to indicate which now-stable feature previously contained an item.
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Unstable.field.implied_by
    """
    implied_by: String

    """
    Rust release which stabilized this feature.
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Stable.field.since
    """
    since: String

    """
    Is this item allowed to be referred to on stable, despite being contained in unstable modules?
    
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_attr/builtin/enum.StabilityLevel.html#variant.Stable.field.allowed_through_unstable_modules
    """
    allowed_through_unstable_modules: Boolean
}
