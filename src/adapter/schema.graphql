directive @filter(op: String!, value: [String!]) on FIELD | INLINE_FRAGMENT
directive @tag(name: String) on FIELD
directive @output(name: String) on FIELD
directive @optional on FIELD
directive @recurse(depth: Int!) on FIELD
directive @fold on FIELD

schema {
  query: Query
}

type Query {
    Crate: Crate!
}


type Crate {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.items
    """
    item: [Item!]!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.Node.html
"""
interface Node {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.find_parent
    """
    parent: Node
}


"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.Node.html#variant.Item
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Item.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ItemKind.html
"""
interface Item implements Node {
    parent: Node
    ident: String!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ItemKind.html#variant.Fn
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.FnSig.html
"""
type Fn implements Item & Node {
    parent: Node
    ident: String!

    body: FnBody!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.BodyId.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Body.html
"""
interface Body implements Node {
    parent: Node

    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Body.html#structfield.value
    """
    value: Expr!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Expr.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html
"""
interface Expr implements Node {
    parent: Node
    
    """
    NOTE: This will require finding the closest parent DefId
    (HirId::expect_owner().to_def_id()) to this node and passing that to `typeck`.

    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/typeck_results/struct.TypeckResults.html#method.node_type
    """
    type: Ty
}

"""
We have no reason to believe that a Fn's body will ever not be a block. 
"""
interface FnBody implements Body & Node {
    parent: Node
    
    value: Block!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html#variant.Block
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Block.html
"""
type Block implements Expr & Node {
    parent: Node

    type: Ty
    
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Block.html#structfield.stmts
    """
    statements: [Statement!]!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.Node.html#variant.Stmt
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Stmt.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.StmtKind.html
"""
interface Statement implements Node {
    parent: Node
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.StmtKind.html#variant.Local
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Local.html
"""
type LocalStatement implements Statement & Node {
    parent: Node
    
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Local.html#structfield.init
    """
    init: Expr
}

interface Ty {
    """
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html
    https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/type.TyKind.html
    """
    as_string: String!
}