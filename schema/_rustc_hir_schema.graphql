# General patterns of this schema:
# - represent sum types with interfaces
# - use `enum` over `interface` for "simple" enums
# - every member of a type should be required (`!`) unless its an `Option`
# 
# Also, I've only just noticed this because this is the longest GQL schema I've ever
# written, but having to copy-paste the body of every interface a type implements is
# super-annoying. Why did Facebook design it this way?

schema {
  query: Query
}

type Query {
  # crate: Crate!
  items: [Item!]!
}

"""
TODO: Add `id` as a member

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.Node.html
"""
interface Node {
    # https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.find_parent
    parent: Node
    # TODO: Add
    # span: Span!
    # TODO: Add
    # owner: Owner!
}

"""
TODO: It may be better for owner to be implemented as a union.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.OwnerNode.html
"""
interface Owner {
}

interface Item implements Node & Owner {
    parent: Node

    ident: Ident!
    # https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Item.html#structfield.owner_id
    # owner: Owner!
    span: Span!
    vis_span: Span!
    descr: String!
}

type Fn implements Item {
    ident: Ident!
    span: Span!
    vis_span: Span!

    sig: FnSig!
    generics: Generics!
    body: Body!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.FnSig.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.FnHeader.html
"""
type FnSig {
    unsafe: Boolean!
    const: Boolean!
    # a little more complex than a boolean, but does it matter?
    # https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.IsAsync.html
    async: Boolean!
    # TODO: Implement Abi sum type
    # abi: Abi!
    inputs: [Ty!]!
    output: FnRetTy!
    c_variadic: Boolean!
    implicit_self: ImplicitSelf!
    lifetime_elision_allowed: Boolean!
}


"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Ty.html
"""
interface Ty implements Node {
    parent: Node
    span: Span!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.MutTy.html
"""
interface MutTy implements Ty {
    parent: Node
    span: Span!
    inner: Ty!
    mutable: Boolean!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Slice
"""
type Slice implements Ty {
    parent: Node
    span: Span!
    inner: Ty!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Array
"""
type Array implements Ty {
    parent: Node
    span: Span!
    inner: Ty!
    len: ArrayLen!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ArrayLen.html
"""
interface ArrayLen implements Node {
    parent: Node
}

type ArrayLenInfer implements ArrayLen {
    parent: Node
}

type ArrayLenBody implements ArrayLen {
    parent: Node
    anon_const: AnonConst
}

type AnonConst implements Node {
    parent: Node
    body: Body!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Ptr
"""
type Ptr implements MutTy {
    parent: Node
    span: Span!
    inner: Ty!
    mutable: Boolean!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Ref
"""
type Ref implements Ty {
    parent: Node
    span: Span!
    inner: Ty!
    mutable: Boolean!
    lifetime: Lifetime!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Lifetime.html
"""
type Lifetime implements Node {
    parent: Node
    ident: Ident!
    # https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.LifetimeName.html
    # semantics: LifetimeName!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.BareFn
"""
type BareFn implements Ty {
    parent: Node
    span: Span!
    &'hir BareFnTy<'hir>
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Tup
"""
type Tup implements Ty {
    parent: Node
    span: Span!
    &'hir [Ty<'hir>]
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Path
"""
type Path implements Ty {
    parent: Node
    span: Span!
    QPath<'hir>
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.OpaqueDef
"""
type OpaqueDef implements Ty {
    parent: Node
    span: Span!
    ItemId, &'hir [GenericArg<'hir>], bool
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.TraitObject
"""
type TraitObject implements Ty {
    parent: Node
    span: Span!
    &'hir [PolyTraitRef<'hir>], &'hir Lifetime, TraitObjectSyntax
}

"""
Unused for now.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Typeof
"""
type Typeof implements Ty {
    parent: Node
    span: Span!
    anon_const: AnonConst!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Err
"""
type Err implements Ty {
    parent: Node
    span: Span!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Never
"""
type Never implements Ty {
    parent: Node
    span: Span!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.TyKind.html#variant.Infer
"""
type Infer implements Ty {
    parent: Node
    span: Span!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ImplicitSelfKind.html
"""

type ImplicitSelf {
    implicit: bool!
    kind: ImplicitSelfKind!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ImplicitSelfKind.html
"""
enum ImplicitSelfKind {
    IMM
    MUT
    IMMREF
    MUTREF
    NONE
}


"""
The name of an item. It might be a dummy name in case of anonymous items.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html
"""
type Ident {
  name: String!
  span: Span!
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/span_encoding/struct.Span.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.SpanData.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html
"""
interface Span {
  source_file: SourceFile!
  line: Int!
}


"""
A single source in the SourceMap.

TODO: Flesh out.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.SourceFile.html
"""
type SourceFile {
    name: String!,
    src: String
    # src_hash: SourceFileHash,
    # external_src: FreezeLock<ExternalSource>,
    # start_pos: BytePos,
    source_len: Int!
    # lines: FreezeLock<SourceFileLines>,
    # multibyte_chars: Vec<MultiByteChar>,
    # non_narrow_chars: Vec<NonNarrowChar>,
    # normalized_pos: Vec<NormalizedPos>,
    # stable_id: StableSourceFileId,
    # TODO: How do I go from a CrateNum to a hir::Crate?
    # crate: Crate!
}
