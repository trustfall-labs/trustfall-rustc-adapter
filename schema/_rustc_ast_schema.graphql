# General patterns of this schema:
# - represent sum types with interfaces
# - flatten down common members like `span: Span` and `kind` using interfaces
# - use `enum` over `interface` for "simple" enums
# - every member of a type should be required (`!`) unless its an `Option`

schema {
  query: RootSchemaQuery
}

directive @filter(op: String!, value: [String!]) on FIELD | INLINE_FRAGMENT
directive @tag(name: String) on FIELD
directive @output(name: String) on FIELD
directive @optional on FIELD
directive @recurse(depth: Int!) on FIELD
directive @fold on FIELD

type RootSchemaQuery {
  ASTCrate: ASTCrate!
}

type ASTCrate {
  items: [Item!]! 
}

"""
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/span_encoding/struct.Span.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.SpanData.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html
"""
interface Span {
  source_file: SourceFile!
  line: Int!
}


"""
A single source in the SourceMap.

TODO: Flesh out

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.SourceFile.html
"""
type SourceFile {
    name: String!,
    src: String
    # src_hash: SourceFileHash,
    # external_src: FreezeLock<ExternalSource>,
    # start_pos: BytePos,
    source_len: Int!
    # lines: FreezeLock<SourceFileLines>,
    # multibyte_chars: Vec<MultiByteChar>,
    # non_narrow_chars: Vec<NonNarrowChar>,
    # normalized_pos: Vec<NormalizedPos>,
    # stable_id: StableSourceFileId,
    crate: ASTCrate!
}

"""
An item definition.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.Item.html
"""
interface Item implements Span {
  source_file: SourceFile!
  line: Int!

  attrs: [Attribute!]!
  vis: Visibility!
  ident: Ident!
}

"""
A syntax-level representation of an attribute.

TODO: Should be an interface due to `kind`.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.Attribute.html
"""
type Attribute implements Span {
  source_file: SourceFile!
  line: Int!
}

"""
TODO: Should be an interface due to `kind`.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.Visibility.html
"""
type Visibility implements Span {
  source_file: SourceFile!
  line: Int!
}

"""
The name of an item. It might be a dummy name in case of anonymous items.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html
"""
type Ident implements Span {
  source_file: SourceFile!
  line: Int!
  
  name: String!
}

"""
A function declaration (`fn`).

E.g., `fn foo(bar: usize) -> usize { .. }`.

TODO: Implement other types

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.Fn.html
"""
type Fn implements Item {
  source_file: SourceFile!
  line: Int!

  attrs: [Attribute!]!
  vis: Visibility!
  ident: Ident!

  # defaultness: Defaultness!
  # generics: Generics!
  sig: FnSig!
  # body: Block,
}

"""
Represents a functionâ€™s signature in a trait declaration, trait implementation, or free function.

TODO: If we care about preserving the spans of inner items, we need to unflatten this type.

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.FnSig.html
https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.FnHeader.html

"""
type FnSig implements Span {
  unsafe: Boolean!
  coroutine_kind: CoroutineKind
  const: Boolean!
  extern: Extern!
  inputs: [Param!]!
  output: [Param!]!
}

"""
Describes what kind of coroutine markers, if any, a function has.

TODO: Should be interface CoroutineKind implements Span

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.CoroutineKind.html
"""
enum CoroutineKind {
  ASYNC
  GEN
  ASYNC_GEN
}

"""
`extern` qualifier on a function item or function type.

TODO: Should be interface Extern

https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.Extern.html
"""
enum Extern {
  ASYNC
  GEN
  ASYNC_GEN
}
